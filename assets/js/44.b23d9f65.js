(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{219:function(e,t,o){"use strict";o.r(t);var i=o(0),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"built-in-commands"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#built-in-commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Built-in Commands")]),e._v(" "),o("p",[e._v("This document lists a subset of Visual Studio Code commands that you might use with "),o("code",[e._v("vscode.commands.executeCommand")]),e._v(" API.")]),e._v(" "),o("p",[e._v("Read the "),o("a",{attrs:{href:"/api/extension-guides/command"}},[e._v("Commands Guide")]),e._v(" for how to use the commands API.")]),e._v(" "),o("p",[e._v("The following is a sample of how to open a new folder in VS Code:")]),e._v(" "),o("div",{staticClass:"language-javascript extra-class"},[o("pre",{pre:!0,attrs:{class:"language-javascript"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" uri "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Uri"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/some/path/to/folder'")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" success "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" commands"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("executeCommand")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[e._v("'vscode.openFolder'")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" uri"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),o("h2",{attrs:{id:"commands"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Commands")]),e._v(" "),o("p",[o("code",[e._v("vscode.executeWorkspaceSymbolProvider")]),e._v(" - Execute all workspace symbol provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("query")]),e._v(" - Search string")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of SymbolInformation and DocumentSymbol instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeDefinitionProvider")]),e._v(" - Execute all definition provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position of a symbol")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of Location instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeDeclarationProvider")]),e._v(" - Execute all declaration provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position of a symbol")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of Location-instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeTypeDefinitionProvider")]),e._v(" - Execute all type definition providers.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position of a symbol")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of Location instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeImplementationProvider")]),e._v(" - Execute all implementation providers.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position of a symbol")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of Location instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeHoverProvider")]),e._v(" - Execute all hover provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position of a symbol")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of Hover instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeDocumentHighlights")]),e._v(" - Execute document highlight provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position in a text document")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of DocumentHighlight instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeReferenceProvider")]),e._v(" - Execute reference provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position in a text document")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of Location instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeDocumentRenameProvider")]),e._v(" - Execute rename provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position in a text document")]),e._v(" "),o("li",[o("em",[e._v("newName")]),e._v(" - The new symbol name")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to a WorkspaceEdit.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeSignatureHelpProvider")]),e._v(" - Execute signature help provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position in a text document")]),e._v(" "),o("li",[o("em",[e._v("triggerCharacter")]),e._v(" - (optional) Trigger signature help when the user types the character, like "),o("code",[e._v(",")]),e._v(" or "),o("code",[e._v("(")])]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to SignatureHelp.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeDocumentSymbolProvider")]),e._v(" - Execute document symbol provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of SymbolInformation and DocumentSymbol instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeCompletionItemProvider")]),e._v(" - Execute completion item provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position in a text document")]),e._v(" "),o("li",[o("em",[e._v("triggerCharacter")]),e._v(" - (optional) Trigger completion when the user types the character, like "),o("code",[e._v(",")]),e._v(" or "),o("code",[e._v("(")])]),e._v(" "),o("li",[o("em",[e._v("itemResolveCount")]),e._v(" - (optional) Number of completions to resolve (too large numbers slow down completions)")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to a CompletionList instance.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeCodeActionProvider")]),e._v(" - Execute code action provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("range")]),e._v(" - Range in a text document")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of Command instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeCodeLensProvider")]),e._v(" - Execute CodeLens provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("itemResolveCount")]),e._v(" - (optional) Number of lenses that should be resolved and returned. Will only return resolved lenses, will impact performance)")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of CodeLens instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeFormatDocumentProvider")]),e._v(" - Execute document format provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("options")]),e._v(" - Formatting options")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of TextEdits.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeFormatRangeProvider")]),e._v(" - Execute range format provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("range")]),e._v(" - Range in a text document")]),e._v(" "),o("li",[o("em",[e._v("options")]),e._v(" - Formatting options")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of TextEdits.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeFormatOnTypeProvider")]),e._v(" - Execute document format provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - Position in a text document")]),e._v(" "),o("li",[o("em",[e._v("ch")]),e._v(" - Character that got typed")]),e._v(" "),o("li",[o("em",[e._v("options")]),e._v(" - Formatting options")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of TextEdits.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeLinkProvider")]),e._v(" - Execute document link provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of DocumentLink instances.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeDocumentColorProvider")]),e._v(" - Execute document color provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - Uri of a text document")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of ColorInformation objects.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.executeColorPresentationProvider")]),e._v(" - Execute color presentation provider.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("color")]),e._v(" - The color to show and insert")]),e._v(" "),o("li",[o("em",[e._v("context")]),e._v(" - Context object with uri and range")]),e._v(" "),o("li",[o("em",[e._v("(returns)")]),e._v(" - A promise that resolves to an array of ColorPresentation objects.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.openFolder")]),e._v(" - Open a folder or workspace in the current window or new window depending on the newWindow argument.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - (optional) Uri of the folder or workspace file to open. If not provided, a native dialog will ask the user for the folder")]),e._v(" "),o("li",[o("em",[e._v("newWindow")]),e._v(" - (optional) Whether to open the folder/workspace in a new window or the same. Defaults to opening in the same window.")])]),e._v(" "),o("p",[e._v("Note that opening in the same window will shutdown the current extension host process and start a new one on the given folder/workspace unless the newWindow parameter is set to true.")]),e._v(" "),o("p",[o("code",[e._v("vscode.diff")]),e._v(" - Opens the provided resources in the diff editor to compare their contents.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("left")]),e._v(" - Left-hand side resource of the diff editor")]),e._v(" "),o("li",[o("em",[e._v("right")]),e._v(" - Right-hand side resource of the diff editor")]),e._v(" "),o("li",[o("em",[e._v("title")]),e._v(" - (optional) Human readable title for the diff editor")]),e._v(" "),o("li",[o("em",[e._v("options")]),e._v(" - (optional) Editor options, see vscode.TextDocumentShowOptions")])]),e._v(" "),o("p",[o("code",[e._v("vscode.open")]),e._v(" - Opens the provided resource in the editor.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("resource")]),e._v(" - Resource to open")]),e._v(" "),o("li",[o("em",[e._v("columnOrOptions")]),e._v(" - (optional) Either the column in which to open or editor options, see vscode.TextDocumentShowOptions")])]),e._v(" "),o("p",[e._v("Can be a text or binary file, or a http(s) url. If you need more control over the options for opening a text file, use vscode.window.showTextDocument instead.")]),e._v(" "),o("p",[o("code",[e._v("vscode.removeFromRecentlyOpened")]),e._v(" - Removes an entry with the given path from the recently opened list.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("path")]),e._v(" - Path to remove from recently opened.")])]),e._v(" "),o("p",[o("code",[e._v("vscode.setEditorLayout")]),e._v(" - Sets the editor layout.")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("layout")]),e._v(" - The editor layout to set.")])]),e._v(" "),o("p",[e._v("The layout is described as object with an initial (optional) orientation (0 = horizontal, 1 = vertical) and an array of editor groups within. Each editor group can have a size and another array of editor groups that will be laid out orthogonal to the orientation. If editor group sizes are provided, their sum must be 1 to be applied per row or column. Example for a 2x2 grid: "),o("code",[e._v("{ orientation: 0, groups: [{ groups: [{}, {}], size: 0.5 }, { groups: [{}, {}], size: 0.5 }] }")])]),e._v(" "),o("p",[o("code",[e._v("cursorMove")]),e._v(" - Move cursor to a logical position in the view")]),e._v(" "),o("ul",[o("li",[o("p",[o("em",[e._v("Cursor move argument object")])]),e._v(" "),o("p",[e._v("Property-value pairs that can be passed through this argument:")]),e._v(" "),o("ul",[o("li",[e._v("'to': A mandatory logical position value providing where to move the cursor."),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("'left', 'right', 'up', 'down'\n'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n")])])])]),e._v(" "),o("li",[e._v("'by': Unit to move. Default is computed based on 'to' value."),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("'line', 'wrappedLine', 'character', 'halfLine'\n")])])])]),e._v(" "),o("li",[e._v("'value': Number of units to move. Default is '1'.")]),e._v(" "),o("li",[e._v("'select': If 'true' makes the selection. Default is 'false'.")])])])]),e._v(" "),o("p",[o("code",[e._v("editorScroll")]),e._v(" - Scroll editor in the given direction")]),e._v(" "),o("ul",[o("li",[o("p",[o("em",[e._v("Editor scroll argument object")])]),e._v(" "),o("p",[e._v("Property-value pairs that can be passed through this argument:")]),e._v(" "),o("ul",[o("li",[e._v("'to': A mandatory direction value."),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("'up', 'down'\n")])])])]),e._v(" "),o("li",[e._v("'by': Unit to move. Default is computed based on 'to' value."),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("'line', 'wrappedLine', 'page', 'halfPage'\n")])])])]),e._v(" "),o("li",[e._v("'value': Number of units to move. Default is '1'.")]),e._v(" "),o("li",[e._v("'revealCursor': If 'true' reveals the cursor if it is outside view port.")])])])]),e._v(" "),o("p",[o("code",[e._v("revealLine")]),e._v(" - Reveal the given line at the given logical position")]),e._v(" "),o("ul",[o("li",[o("p",[o("em",[e._v("Reveal line argument object")])]),e._v(" "),o("p",[e._v("Property-value pairs that can be passed through this argument:")]),e._v(" "),o("ul",[o("li",[e._v("'lineNumber': A mandatory line number value.")]),e._v(" "),o("li",[e._v("'at': Logical position at which line has to be revealed ."),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("'top', 'center', 'bottom'\n")])])])])])])]),e._v(" "),o("p",[o("code",[e._v("editor.unfold")]),e._v(" - Unfold the content in the editor")]),e._v(" "),o("ul",[o("li",[o("p",[o("em",[e._v("Unfold editor argument")])]),e._v(" "),o("p",[e._v("Property-value pairs that can be passed through this argument:")]),e._v(" "),o("ul",[o("li",[e._v("'levels': Number of levels to unfold. If not set, defaults to 1.")]),e._v(" "),o("li",[e._v("'direction': If 'up', unfold given number of levels up otherwise unfolds down.")]),e._v(" "),o("li",[e._v("'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.")])])])]),e._v(" "),o("p",[o("code",[e._v("editor.fold")]),e._v(" - Fold the content in the editor")]),e._v(" "),o("ul",[o("li",[o("p",[o("em",[e._v("Fold editor argument")])]),e._v(" "),o("p",[e._v("Property-value pairs that can be passed through this argument:")]),e._v(" "),o("ul",[o("li",[e._v("'levels': Number of levels to fold. Defaults to 1.")]),e._v(" "),o("li",[e._v("'direction': If 'up', folds given number of levels up otherwise folds down.")]),e._v(" "),o("li",[e._v("'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.")])])])]),e._v(" "),o("p",[o("code",[e._v("editor.action.showReferences")]),e._v(" - Show references at a position in a file")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("uri")]),e._v(" - The text document in which to show references")]),e._v(" "),o("li",[o("em",[e._v("position")]),e._v(" - The position at which to show")]),e._v(" "),o("li",[o("em",[e._v("locations")]),e._v(" - An array of locations.")])]),e._v(" "),o("p",[o("code",[e._v("moveActiveEditor")]),e._v(" - Move the active editor by tabs or groups")]),e._v(" "),o("ul",[o("li",[o("p",[o("em",[e._v("Active editor move argument")])]),e._v(" "),o("p",[e._v("Argument Properties:")]),e._v(" "),o("ul",[o("li",[e._v("'to': String value providing where to move.")]),e._v(" "),o("li",[e._v("'by': String value providing the unit for move (by tab or by group).")]),e._v(" "),o("li",[e._v("'value': Number value providing how many positions or an absolute position to move.")])])])]),e._v(" "),o("h2",{attrs:{id:"simple-commands"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#simple-commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Simple commands")]),e._v(" "),o("p",[e._v("Simple commands that do not require parameters can be found in the Keyboard Shortcuts list in the default "),o("code",[e._v("keybindings.json")]),e._v(" file. The unbound commands are listed in a comment block at the bottom of the file.")]),e._v(" "),o("p",[e._v("To review "),o("code",[e._v("keybindings.json")]),e._v(":")]),e._v(" "),o("p",[e._v("Windows, Linux: "),o("strong",[e._v("File")]),e._v(" > "),o("strong",[e._v("Preferences")]),e._v(" > "),o("strong",[e._v("Keyboard Shortcuts")]),e._v(" > "),o("code",[e._v("keybindings.json")]),e._v(" link")]),e._v(" "),o("p",[e._v("macOS:\n"),o("strong",[e._v("Code")]),e._v(" > "),o("strong",[e._v("Preferences")]),e._v(" > "),o("strong",[e._v("Keyboard Shortcuts")]),e._v(" > "),o("code",[e._v("keybindings.json")]),e._v(" link")])])}),[],!1,null,null,null);t.default=r.exports}}]);