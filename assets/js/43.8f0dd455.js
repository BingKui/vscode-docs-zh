(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{227:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"activation-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activation-events","aria-hidden":"true"}},[e._v("#")]),e._v(" Activation Events")]),e._v(" "),a("p",[a("strong",[e._v("Activation Events")]),e._v(" is a set of JSON declarations that you make in the "),a("code",[e._v("activationEvents")]),e._v(" field of "),a("code",[e._v("package.json")]),e._v(" "),a("a",{attrs:{href:"/api/references/extension-manifest"}},[e._v("Extension Manifest")]),e._v(". Your extension becomes activated when the "),a("strong",[e._v("Activation Event")]),e._v(" happens. Here is a list of all available "),a("strong",[e._v("Activation Events")]),e._v(":")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/api/references/activation-events#onLanguage"}},[a("code",[e._v("onLanguage")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#onCommand"}},[a("code",[e._v("onCommand")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#onDebug"}},[a("code",[e._v("onDebug")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/api/references/activation-events#onDebugInitialConfigurations"}},[a("code",[e._v("onDebugInitialConfigurations")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#onDebugResolve"}},[a("code",[e._v("onDebugResolve")])])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#workspaceContains"}},[a("code",[e._v("workspaceContains")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#onFileSystem"}},[a("code",[e._v("onFileSystem")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#onView"}},[a("code",[e._v("onView")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#onUri"}},[a("code",[e._v("onUri")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#onWebviewPanel"}},[a("code",[e._v("onWebviewPanel")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/activation-events#Start-up"}},[a("code",[e._v("*")])])])]),e._v(" "),a("p",[e._v("We also provide a reference of all fields in the "),a("a",{attrs:{href:"/api/references/extension-manifest"}},[a("code",[e._v("package.json")]),e._v(" extension manifest")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"onlanguage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onlanguage","aria-hidden":"true"}},[e._v("#")]),e._v(" onLanguage")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated whenever a file that resolves to a certain language gets opened.")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onLanguage:python"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("p",[e._v("The "),a("code",[e._v("onLanguage")]),e._v(" event takes a "),a("a",{attrs:{href:"/docs/languages/identifiers"}},[e._v("language identifier")]),e._v(" value.")]),e._v(" "),a("p",[e._v("Multiple languages can be declared with separate "),a("code",[e._v("onLanguage")]),e._v(" entries in the "),a("code",[e._v("activationEvents")]),e._v(" array.")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onLanguage:json"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onLanguage:markdown"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onLanguage:typescript"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("h2",{attrs:{id:"oncommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oncommand","aria-hidden":"true"}},[e._v("#")]),e._v(" onCommand")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated whenever a command is being invoked:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onCommand:extension.sayHello"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("h2",{attrs:{id:"ondebug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ondebug","aria-hidden":"true"}},[e._v("#")]),e._v(" onDebug")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated before a debug session is started:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onDebug"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("h3",{attrs:{id:"ondebuginitialconfigurations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ondebuginitialconfigurations","aria-hidden":"true"}},[e._v("#")]),e._v(" onDebugInitialConfigurations")]),e._v(" "),a("h3",{attrs:{id:"ondebugresolve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ondebugresolve","aria-hidden":"true"}},[e._v("#")]),e._v(" onDebugResolve")]),e._v(" "),a("p",[e._v("These are two more fine-grained "),a("code",[e._v("onDebug")]),e._v(" activation events:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("onDebugInitialConfigurations")]),e._v(" is fired just before the "),a("code",[e._v("provideDebugConfigurations")]),e._v(" method of the "),a("code",[e._v("DebugConfigurationProvider")]),e._v(" is called.")]),e._v(" "),a("li",[a("code",[e._v("onDebugResolve:type")]),e._v(" is fired just before the "),a("code",[e._v("resolveDebugConfiguration")]),e._v(" method of the "),a("code",[e._v("DebugConfigurationProvider")]),e._v(" for the specified type is called.")])]),e._v(" "),a("p",[a("strong",[e._v("Rule of thumb:")]),e._v(" If activation of a debug extension is lightweight, use "),a("code",[e._v("onDebug")]),e._v(". If it is heavyweight, use "),a("code",[e._v("onDebugInitialConfigurations")]),e._v(" and/or "),a("code",[e._v("onDebugResolve")]),e._v(" depending on whether the "),a("code",[e._v("DebugConfigurationProvider")]),e._v(" implements the corresponding methods "),a("code",[e._v("provideDebugConfigurations")]),e._v(" and/or "),a("code",[e._v("resolveDebugConfiguration")]),e._v(". See "),a("a",{attrs:{href:"/api/extension-guides/debugger-extension#using-a-debugconfigurationprovider"}},[e._v("Using a DebugConfigurationProvider")]),e._v(" for more details on these methods.")]),e._v(" "),a("h2",{attrs:{id:"workspacecontains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workspacecontains","aria-hidden":"true"}},[e._v("#")]),e._v(" workspaceContains")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated whenever a folder is opened and the folder contains at least one file that matches a glob pattern.")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"workspaceContains:**/.editorconfig"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("h2",{attrs:{id:"onfilesystem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onfilesystem","aria-hidden":"true"}},[e._v("#")]),e._v(" onFileSystem")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated whenever a file or folder from a specific "),a("em",[e._v("scheme")]),e._v(" is read. This is usually the "),a("code",[e._v("file")]),e._v("-scheme, but with custom file system providers more schemes come into place, e.g "),a("code",[e._v("ftp")]),e._v(" or "),a("code",[e._v("ssh")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onFileSystem:sftp"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("h2",{attrs:{id:"onview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onview","aria-hidden":"true"}},[e._v("#")]),e._v(" onView")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated whenever a view of the specified id is expanded:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onView:nodeDependencies"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("h2",{attrs:{id:"onuri"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onuri","aria-hidden":"true"}},[e._v("#")]),e._v(" onUri")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated whenever a system-wide Uri for that extension is opened. The Uri scheme is fixed to either "),a("code",[e._v("vscode")]),e._v(" or "),a("code",[e._v("vscode-insiders")]),e._v(". The Uri authority must be the extension's identifier. The rest of the Uri is arbitrary.")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onUri"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("p",[e._v("If the "),a("code",[e._v("vscode.git")]),e._v(" extension defines "),a("code",[e._v("onUri")]),e._v(" as an activation event, it will be activated in any of the following Uris are open:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("vscode://vscode.git/init")])]),e._v(" "),a("li",[a("code",[e._v("vscode://vscode.git/clone?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-vsce.git")])]),e._v(" "),a("li",[a("code",[e._v("vscode-insiders://vscode.git/init")]),e._v(" (for VS Code Insiders)")])]),e._v(" "),a("h2",{attrs:{id:"onwebviewpanel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onwebviewpanel","aria-hidden":"true"}},[e._v("#")]),e._v(" onWebviewPanel")]),e._v(" "),a("p",[e._v("This activation event is emitted and interested extensions will be activated whenever VS Code needs to restore a webview with the matching "),a("code",[e._v("viewType")]),e._v(".")]),e._v(" "),a("p",[e._v("For example, the declaration of onWebviewPanel below:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    ..."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"onWebviewPanel:catCoding"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[e._v("will cause the extension to be activated when VS Code needs to restore a webview with the viewType: "),a("code",[e._v("catCoding")]),e._v(". The viewType is set in the call to "),a("code",[e._v("window.createWebviewPanel")]),e._v(" and you will need to have another activation event (for example, onCommand) to initially activate your extension and create the webview.")]),e._v(" "),a("h2",{attrs:{id:"start-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-up","aria-hidden":"true"}},[e._v("#")]),e._v(" Start up")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("*")]),e._v(" activation event is emitted and interested extensions will be activated whenever VS Code starts up. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("...\n"),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"activationEvents"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n...\n")])])]),a("blockquote",[a("p",[a("strong",[e._v("Note:")]),e._v(" An extension can listen to multiple activation events, and that is preferable to listening to "),a("code",[e._v('"*"')]),e._v(".")])]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("Note:")]),e._v(" An extension "),a("strong",[e._v("must")]),e._v(" export an "),a("code",[e._v("activate()")]),e._v(" function from its main module and it will be invoked "),a("strong",[e._v("only once")]),e._v(" by VS Code when any of the specified activation events is emitted. Also, an extension "),a("strong",[e._v("should")]),e._v(" export a "),a("code",[e._v("deactivate()")]),e._v(" function from its main module to perform cleanup tasks on VS Code shutdown. Extension "),a("strong",[e._v("must")]),e._v(" return a Promise from "),a("code",[e._v("deactivate()")]),e._v(" if the cleanup process is asynchronous. An extension may return "),a("code",[e._v("undefined")]),e._v(" from "),a("code",[e._v("deactivate()")]),e._v(" if the cleanup runs synchronously.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);