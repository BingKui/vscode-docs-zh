(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{251:function(e,t,a){"use strict";a.r(t);var o=a(0),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"common-capabilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-capabilities","aria-hidden":"true"}},[e._v("#")]),e._v(" Common Capabilities")]),e._v(" "),a("p",[e._v("Common Capabilities are important building blocks for your extensions. Almost all extensions use some of these functionalities. Here is how you can take advantage of them.")]),e._v(" "),a("h2",{attrs:{id:"command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command","aria-hidden":"true"}},[e._v("#")]),e._v(" Command")]),e._v(" "),a("p",[e._v("Command is central to how VS Code works. You open the Command Palette to execute commands, bind custom keybindings to commands, and right-click to invoke commands in Context Menus.")]),e._v(" "),a("p",[e._v("An extension could:")]),e._v(" "),a("ul",[a("li",[e._v("Register and execute commands with the "),a("a",{attrs:{href:"/api/references/vscode-api#commands"}},[a("code",[e._v("vscode.commands")])]),e._v(" API.")]),e._v(" "),a("li",[e._v("Make commands available in the Command Palette with the "),a("a",{attrs:{href:"/api/references/contribution-points#contributes.commands"}},[a("code",[e._v("contributes.commands")])]),e._v(" Contribution Point.")])]),e._v(" "),a("p",[e._v("Learn more about commands at the "),a("a",{attrs:{href:"/api/extension-guides/command"}},[e._v("Extension Guides / Command")]),e._v(" topic.")]),e._v(" "),a("h2",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("An extension can contribute extension-specific settings with the "),a("a",{attrs:{href:"/api/references/contribution-points#contributes.configuration"}},[a("code",[e._v("contributes.configuration")])]),e._v(" Contribution Point and read them using the "),a("a",{attrs:{href:"/api/references/vscode-api#workspace.getConfiguration"}},[a("code",[e._v("workspace.getConfiguration")])]),e._v(" API.")]),e._v(" "),a("h2",{attrs:{id:"keybinding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keybinding","aria-hidden":"true"}},[e._v("#")]),e._v(" Keybinding")]),e._v(" "),a("p",[e._v("An extension can add custom keybindings. Read more in the "),a("a",{attrs:{href:"/api/references/contribution-points#contributes.keybindings"}},[a("code",[e._v("contributes.keybindings")])]),e._v(" and "),a("a",{attrs:{href:"/docs/getstarted/keybindings"}},[e._v("Key Bindings")]),e._v(" topics.")]),e._v(" "),a("h2",{attrs:{id:"context-menu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context-menu","aria-hidden":"true"}},[e._v("#")]),e._v(" Context Menu")]),e._v(" "),a("p",[e._v("An extension can register custom Context Menu items that will be displayed in different parts of the VS Code UI on right-click. Read more at the "),a("a",{attrs:{href:"/api/references/contribution-points#contributes.menus"}},[a("code",[e._v("contributes.menus")])]),e._v(" Contribution Point.")]),e._v(" "),a("h2",{attrs:{id:"data-storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-storage","aria-hidden":"true"}},[e._v("#")]),e._v(" Data Storage")]),e._v(" "),a("p",[e._v("There are four options for storing data:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/api/references/vscode-api#ExtensionContext.workspaceState"}},[a("code",[e._v("ExtensionContext.workspaceState")])]),e._v(": A workspace storage where you can write key/value pairs. VS Code manages the storage and will restore it when the same workspace is opened again.")]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/vscode-api#ExtensionContext.globalState"}},[a("code",[e._v("ExtensionContext.globalState")])]),e._v(": A global storage where you can write key/value pairs. VS Code manages the storage and will restore it for each extension activation.")]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/vscode-api#ExtensionContext.storagePath"}},[a("code",[e._v("ExtensionContext.storagePath")])]),e._v(": A workspace specific storage path pointing to a local directory where your extension has write/read access. This is a good option if you need to store large files that is accessible only from current workspace.")]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/vscode-api#ExtensionContext.globalStoragePath"}},[a("code",[e._v("ExtensionContext.globalStoragePath")])]),e._v(": A global storage path pointing to a local directory where your extension has write/read access. This is a good option if you need to store large files that is accessible from all workspaces.")])]),e._v(" "),a("p",[e._v("The extension context is available to the "),a("code",[e._v("activate")]),e._v(" function in the "),a("a",{attrs:{href:"/api/get-started/extension-anatomy#extension-entry-file"}},[e._v("Extension Entry File")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"display-notifications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#display-notifications","aria-hidden":"true"}},[e._v("#")]),e._v(" Display Notifications")]),e._v(" "),a("p",[e._v("Almost all extensions need to present information to the user at some point. VS Code offers three APIs for displaying notification messages of different severity:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/api/references/vscode-api#window.showInformationMessage"}},[a("code",[e._v("window.showInformationMessage")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/vscode-api#window.showWarningMessage"}},[a("code",[e._v("window.showWarningMessage")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"/api/references/vscode-api#window.showErrorMessage"}},[a("code",[e._v("window.showErrorMessage")])])])]),e._v(" "),a("h2",{attrs:{id:"quick-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quick-pick","aria-hidden":"true"}},[e._v("#")]),e._v(" Quick Pick")]),e._v(" "),a("p",[e._v("With the "),a("a",{attrs:{href:"/api/references/vscode-api#QuickPick"}},[a("code",[e._v("vscode.QuickPick")])]),e._v(" API, you can easily collect user input or let the user make a selection from multiple options. The "),a("a",{attrs:{href:"https://github.com/Microsoft/vscode-extension-samples/tree/master/quickinput-sample",target:"_blank",rel:"noopener noreferrer"}},[e._v("QuickInput Sample"),a("OutboundLink")],1),e._v(" illustrates the API.")]),e._v(" "),a("h2",{attrs:{id:"file-picker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-picker","aria-hidden":"true"}},[e._v("#")]),e._v(" File Picker")]),e._v(" "),a("p",[e._v("Extensions can use the "),a("a",{attrs:{href:"/api/references/vscode-api#vscode.window.showOpenDialog"}},[a("code",[e._v("vscode.window.showOpenDialog")])]),e._v(" API to open the system file picker and select files or folders.")]),e._v(" "),a("h2",{attrs:{id:"output-channel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-channel","aria-hidden":"true"}},[e._v("#")]),e._v(" Output Channel")]),e._v(" "),a("p",[e._v("The Output Panel displays a collection of "),a("a",{attrs:{href:"/api/references/vscode-api#OutputChannel"}},[a("code",[e._v("OutputChannel")])]),e._v(", which are great for logging purpose. You can easily take advantage of it with the "),a("a",{attrs:{href:"/api/references/vscode-api#window.createOutputChannel"}},[a("code",[e._v("window.createOutputChannel")])]),e._v(" API.")]),e._v(" "),a("h2",{attrs:{id:"progress-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#progress-api","aria-hidden":"true"}},[e._v("#")]),e._v(" Progress API")]),e._v(" "),a("p",[e._v("You can use the "),a("a",{attrs:{href:"/api/references/vscode-api#Progress"}},[a("code",[e._v("vscode.Progress")])]),e._v(" API for reporting progress updates to the user.")]),e._v(" "),a("p",[e._v("Progress can be shown in different locations using the "),a("a",{attrs:{href:"/api/references/vscode-api#ProgressLocation"}},[a("code",[e._v("ProgressLocation")])]),e._v(" option:")]),e._v(" "),a("ul",[a("li",[e._v("In the Notifications area")]),e._v(" "),a("li",[e._v("In the Source Control view")]),e._v(" "),a("li",[e._v("General progress in the VS Code window")])]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://github.com/Microsoft/vscode-extension-samples/tree/master/progress-sample",target:"_blank",rel:"noopener noreferrer"}},[e._v("Progress Sample"),a("OutboundLink")],1),e._v(" illustrates this API.")])])}),[],!1,null,null,null);t.default=i.exports}}]);