(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{225:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"continuous-integration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continuous-integration","aria-hidden":"true"}},[t._v("#")]),t._v(" Continuous Integration")]),t._v(" "),s("p",[t._v("Extension integration tests can be run on CI services. The "),s("a",{attrs:{href:"https://github.com/Microsoft/vscode-test",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("vscode-test")]),s("OutboundLink")],1),t._v(" library helps you setup extension tests on CI providers and contains a "),s("a",{attrs:{href:"https://github.com/microsoft/vscode-test/tree/master/sample",target:"_blank",rel:"noopener noreferrer"}},[t._v("sample extension"),s("OutboundLink")],1),t._v(" setup on Azure Pipelines. You can check out the "),s("a",{attrs:{href:"https://dev.azure.com/vscode/vscode-test/_build?definitionId=15",target:"_blank",rel:"noopener noreferrer"}},[t._v("build pipeline"),s("OutboundLink")],1),t._v(" or jump directly to the "),s("a",{attrs:{href:"https://github.com/microsoft/vscode-test/blob/master/sample/azure-pipelines.yml",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("azure-pipelines.yml")]),t._v(" file"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"azure-pipelines"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#azure-pipelines","aria-hidden":"true"}},[t._v("#")]),t._v(" Azure Pipelines")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://azure.microsoft.com/services/devops/"}},[s("img",{attrs:{alt:"Azure Pipelines",src:"/assets/api/working-with-extensions/continuous-integration/pipelines-logo.png",width:"318"}})])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://azure.microsoft.com/services/devops/pipelines/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Azure Pipelines"),s("OutboundLink")],1),t._v(" is great for running VS Code extension tests as it supports running the tests on Windows, macOS, and Linux. For Open Source projects, you get unlimited minutes and 10 free parallel jobs. This section explains how to setup an Azure Pipelines for running your extension tests.")]),t._v(" "),s("p",[t._v("First, create a free account on "),s("a",{attrs:{href:"https://azure.microsoft.com/services/devops/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Azure DevOps"),s("OutboundLink")],1),t._v(" and create an "),s("a",{attrs:{href:"https://azure.microsoft.com/features/devops-projects/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Azure DevOps project"),s("OutboundLink")],1),t._v(" for your extension.")]),t._v(" "),s("p",[t._v("Then, add the following "),s("code",[t._v("azure-pipelines.yml")]),t._v(" file to the root of your extension's repository. Other than the "),s("code",[t._v("xvfb")]),t._v(" setup script for Linux that is necessary to run VS Code in headless Linux CI machines, the definition is straight-forward:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("trigger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("strategy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matrix")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("linux")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imageName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ubuntu-16.04'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imageName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'macos-10.13'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("windows")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imageName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vs2017-win2016'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("vmImage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $(imageName)\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("task")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NodeTool@0\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("inputs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("versionSpec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'8.x'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("displayName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Install Node.js'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n    /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n    echo ">>> Started xvfb"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("displayName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Start xvfb\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("condition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" and(succeeded()"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eq(variables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Agent.OS'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 'Linux'))\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n    echo ">>> Compile vscode-test"\n    yarn && yarn compile\n    echo ">>> Compiled vscode-test"\n    cd sample\n    echo ">>> Run sample integration test"\n    yarn && yarn compile && yarn test')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("displayName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Run Tests\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("DISPLAY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("':99.0'")]),t._v("\n")])])]),s("p",[t._v("Finally, "),s("a",{attrs:{href:"https://docs.microsoft.com/azure/devops/pipelines/get-started-yaml?view=vsts#get-your-first-build",target:"_blank",rel:"noopener noreferrer"}},[t._v("create a new pipeline"),s("OutboundLink")],1),t._v(" in your DevOps project and point it to the "),s("code",[t._v("azure-pipelines.yml")]),t._v(" file. Trigger a build and voil√†:")]),t._v(" "),s("p",[s("img",{attrs:{src:"images/continuous-integration/pipelines.png",alt:"pipelines"}})]),t._v(" "),s("p",[t._v("You can enable the build to run continuously when pushing to a branch and even on pull requests. See "),s("a",{attrs:{href:"https://docs.microsoft.com/azure/devops/pipelines/build/triggers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Build pipeline triggers"),s("OutboundLink")],1),t._v(" to learn more.")]),t._v(" "),s("h2",{attrs:{id:"travis-ci"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#travis-ci","aria-hidden":"true"}},[t._v("#")]),t._v(" Travis CI")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/microsoft/vscode-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("vscode-test"),s("OutboundLink")],1),t._v(" also includes a "),s("a",{attrs:{href:"https://github.com/microsoft/vscode-test/blob/master/.travis.yml",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis CI build definition"),s("OutboundLink")],1),t._v(". Because the way to define environment variables is different from Azure Pipelines to Travis CI, the "),s("code",[t._v("xvfb")]),t._v(" script is a little bit different:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("language")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node_js\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("os")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" osx\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" linux\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node_js")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("install")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n    if [ $TRAVIS_OS_NAME == \"linux\" ]; then\n      export DISPLAY=':99.0'\n      /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n    fi")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n    echo ">>> Compile vscode-test"\n    yarn && yarn compile\n    echo ">>> Compiled vscode-test"\n    cd sample\n    echo ">>> Run sample integration test"\n    yarn && yarn compile && yarn test')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" yarn\n")])])]),s("h2",{attrs:{id:"automated-publishing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#automated-publishing","aria-hidden":"true"}},[t._v("#")]),t._v(" Automated publishing")]),t._v(" "),s("p",[t._v("You can configure the CI to publish a new version of the extension automatically.")]),t._v(" "),s("p",[t._v("The publish command is similar to publishing from a local environment using the "),s("a",{attrs:{href:"https://github.com/Microsoft/vsce",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("vsce")]),s("OutboundLink")],1),t._v(" service but the command needs to also include the Personal Access Token (PAT).")]),t._v(" "),s("p",[t._v("You shouldn't expose the PAT with the rest of the source code (it's a sensitive information), so you can store it in a \"secret variable\". The value of that variable will not be exposed and you can use it in the "),s("code",[t._v("azure-pipelines.yml")]),t._v(" file.")]),t._v(" "),s("p",[t._v("To create a secret variable, follow the "),s("a",{attrs:{href:"https://docs.microsoft.com/azure/devops/pipelines/process/variables?tabs=classic%2Cbatch#secret-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("Azure DevOps Secrets instructions"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Next steps will be:")]),t._v(" "),s("ol",[s("li",[t._v("Install "),s("code",[t._v("vsce")]),t._v(" as a "),s("code",[t._v("devDependencies")]),t._v(" ("),s("code",[t._v("npm install vsce --save-dev")]),t._v(" or "),s("code",[t._v("yarn add vsce --dev")]),t._v(").")]),t._v(" "),s("li",[t._v("Declare a "),s("code",[t._v("deploy")]),t._v(" script in "),s("code",[t._v("package.json")]),t._v(" without the PAT.")])]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"deploy"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vsce publish -p"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("Configure the CI so the build will run for all the branches that include tags by adding a "),s("code",[t._v("trigger")]),t._v(" section in "),s("code",[t._v("azure-pipelines.yml")]),t._v(":")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("trigger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("Add a "),s("code",[t._v("publish")]),t._v(" step in "),s("code",[t._v("azure-pipelines.yml")]),t._v(" that calls "),s("code",[t._v("yarn deploy")]),t._v(" with the secret variable. ("),s("code",[t._v("VSCODE_MARKETPLACE_TOKEN")]),t._v(" in the example should be replaced with the name of the secret you created at the beginning of the process).")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n    echo ">>> Publish"\n    yarn deploy $(VSCODE_MARKETPLACE_TOKEN)')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("displayName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Publish\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("condition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" and(succeeded()"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" startsWith(variables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Build.SourceBranch'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 'refs/tags/')"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eq(variables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Agent.OS'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 'Linux'))\n")])])]),s("p",[t._v("The "),s("a",{attrs:{href:"https://docs.microsoft.com/azure/devops/pipelines/process/conditions",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("condition")]),s("OutboundLink")],1),t._v(" property tells the CI to run the publish step only in certain cases.")]),t._v(" "),s("p",[t._v("In our example, the condition has three checks:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("succeeded()")]),t._v(" - Publish only if the tests pass.")]),t._v(" "),s("li",[s("code",[t._v("startsWith(variables['Build.SourceBranch'], 'refs/tags/')")]),t._v(" - Publish only if a tagged (release) build.")]),t._v(" "),s("li",[s("code",[t._v("eq(variables['Agent.OS'], 'Linux')")]),t._v(" - Include if your build runs on multiple agents (Windows, Linux, etc.). If not, remove that part of the condition.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);